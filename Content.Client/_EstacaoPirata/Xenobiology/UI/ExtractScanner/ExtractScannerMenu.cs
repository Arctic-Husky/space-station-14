using System.Numerics;
using Content.Client.UserInterface.Controls;
using Content.Shared._EstacaoPirata.Xenobiology.ExtractScanner;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client._EstacaoPirata.Xenobiology.UI.ExtractScanner;

[GenerateTypedNameReferences]
public sealed partial class ExtractScannerMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _ent = default!;

    public ExtractScannerMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void SetButtonsDisabled(ExtractScannerUpdateState msg)
    {
        SellButton.Disabled = false;
        EjectButton.Disabled = false;

        if (!msg.ServerConnected)
        {
            SellButton.Disabled = true;
            SellButton.ToolTip = Loc.GetString("extract-scanner-no-server-connected");
        }

        if (msg.ContainedSolid == null)
        {
            SellButton.Disabled = true;
            SellButton.ToolTip = Loc.GetString("extract-scanner-no-extract");
            EjectButton.Disabled = true;
            EjectButton.ToolTip = Loc.GetString("extract-scanner-no-extract");
        }

        if (SellButton.Disabled)
        {
            SellButton.RemoveStyleClass("ButtonColorGreen");
        }
        else
        {
            SellButton.AddStyleClass("ButtonColorGreen");
            SellButton.ToolTip = null;
        }

        if (!EjectButton.Disabled)
        {
            EjectButton.ToolTip = null;
        }
    }

    private void UpdateExtractIcon(EntityUid? uid)
    {
        if (uid == null)
        {
            ExtractDisplay.Visible = false;
            return;
        }

        ExtractDisplay.Visible = true;
        ExtractDisplay.SetEntity(uid);
    }

    public void UpdateInformationDisplay(ExtractScannerUpdateState msg)
    {
        var message = new FormattedMessage();

        UpdateExtractIcon(_ent.GetEntity(msg.ContainedSolid)); // Returns the local UID for this entity

        if (msg.ExtractInfo != null)
        {
            message.AddMessage(msg.ExtractInfo);
        }

        Information.SetMessage(message);

        var value = new FormattedMessage();

        if (msg.Value != null)
        {
            value.AddMessage(msg.Value);
        }

        Value.SetMessage(value);
    }
}

